{"version":3,"sources":["../../app-src/util/ProxyFactory.js"],"names":["ProxyFactory","create","objeto","props","armadilha","Proxy","get","target","prop","receiver","_ehFuncao","includes","console","log","apply","arguments","set","value","update","Reflect","fn","Function"],"mappings":";;;;;;UAAaA,Y,GAAN,MAAMA,YAAN,CAAmB;AACxB,eAAOC,MAAP,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;AACtC,iBAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AACvB;AACAI,gBAAIC,MAAJ,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAC1B;AACA;AACA,kBAAIT,aAAaU,SAAb,CAAuBH,OAAOC,IAAP,CAAvB,KAAwCL,MAAMQ,QAAN,CAAeH,IAAf,CAA5C,EAAkE;AAChE,uBAAO,YAAY;AACjBI,0BAAQC,GAAR,CAAa,IAAGN,OAAOC,IAAP,CAAa,yBAA7B;;AAEAD,yBAAOC,IAAP,EAAaM,KAAb,CAAmBP,MAAnB,EAA2BQ,SAA3B;AACA;AACAX,4BAAUG,MAAV;AACD,iBAND;AAOD,eARD,MAQO;AACL,uBAAOA,OAAOC,IAAP,CAAP;AACD;AACF,aAhBsB;AAiBvBQ,gBAAIT,MAAJ,EAAYC,IAAZ,EAAkBS,KAAlB,EAAyBR,QAAzB,EAAmC;AACjC,oBAAMS,SAASC,QAAQH,GAAR,CAAYT,MAAZ,EAAoBC,IAApB,EAA0BS,KAA1B,CAAf;;AAEA;AACA,kBAAId,MAAMQ,QAAN,CAAeH,IAAf,CAAJ,EAA0BJ,UAAUG,MAAV;;AAE1B,qBAAOW,MAAP;AACD;AAxBsB,WAAlB,CAAP;AA0BD;;AAED,eAAOR,SAAP,CAAiBU,EAAjB,EAAqB;AACnB,iBAAO,OAAQA,EAAR,IAAe,OAAQC,QAA9B;AACD;AAhCuB,O","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\r\n  static create(objeto, props, armadilha) {\r\n    return new Proxy(objeto, {\r\n      // metodo get disparará toda vez que o objeto negociacoes chamar as funcões adiciona ou esvazia\r\n      get(target, prop, receiver) {\r\n        // se a propriedade do objeto real for igual a uma função e essa propriedade for do tipo adiciona ou esvazia\r\n        // usa o array de props para realizar o includes\r\n        if (ProxyFactory._ehFuncao(target[prop]) && props.includes(prop)) {\r\n          return function () {\r\n            console.log(`\"${target[prop]}\" disparou a armadilha!`);\r\n\r\n            target[prop].apply(target, arguments);\r\n            // target é a instancia real da negociacao\r\n            armadilha(target);\r\n          }\r\n        } else {\r\n          return target[prop];\r\n        }\r\n      },\r\n      set(target, prop, value, receiver) {\r\n        const update = Reflect.set(target, prop, value);\r\n\r\n        // só executa a armadilha se fizer parte da lista de propr\r\n        if (props.includes(prop)) armadilha(target);\r\n\r\n        return update;\r\n      }\r\n    });\r\n  }\r\n\r\n  static _ehFuncao(fn) {\r\n    return typeof (fn) == typeof (Function);\r\n  }\r\n}"]}