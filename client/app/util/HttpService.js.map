{"version":3,"sources":["../../app-src/util/HttpService.js"],"names":["HttpService","_handleErrors","res","ok","Error","statusText","get","url","fetch","then","json"],"mappings":";;;;;;UAAaA,W,GAAN,MAAMA,WAAN,CAAkB;;AAEvBC,sBAAcC,GAAd,EAAmB;;AAEjB,cAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,iBAAOH,GAAP;AACD;;AAEDI,YAAIC,GAAJ,EAAS;;AAEP,iBAAOC,MAAMD,GAAN,EACJE,IADI,CACCP,OAAO,KAAKD,aAAL,CAAmBC,GAAnB,CADR,EAEJO,IAFI,CAECP,OAAOA,IAAIQ,IAAJ,EAFR,CAAP;;AAIA;;;;;;;;;;;;;;;;;;AAmBD;AAjCsB,O","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n  _handleErrors(res) {\r\n\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    return res;\r\n  }\r\n\r\n  get(url) {\r\n\r\n    return fetch(url)\r\n      .then(res => this._handleErrors(res))\r\n      .then(res => res.json());\r\n\r\n    /* formato de requisição com Promise/XMLHttpRequest\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest(); // variavel da request\r\n      xhr.open('GET', url); // abertura para requisições\r\n\r\n      // quando houver mudança no status de requisições\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState == 4) {\r\n          if (xhr.status == 200) { // resultado OK\r\n            resolve(JSON.parse(xhr.responseText)); // converte o resultado em objeto json\r\n          } else {\r\n            // caso seja um erro\r\n            console.log(xhr.responseText);\r\n            reject(xhr.responseText);\r\n          }\r\n        }\r\n      };\r\n      xhr.send(); // envia o resultado para a chamada\r\n    });*/\r\n  }\r\n}"]}