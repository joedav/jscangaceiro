{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,YAAMA,SAAS,CAAC,aAAD,CAAf;;AAEA;AACA,UAAIC,aAAa,IAAjB;;AAEA;AACA,UAAIC,QAAQ,IAAZ;;UAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;;AAE7B;AACAC,sBAAc;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AAED;;AAED;AACA,eAAOC,aAAP,GAAuB;;AAErB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEtC;AACA,gBAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhB;AACA;AACA,kBAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEA;AACAF,wBAAYG,eAAZ,GAA8BC,KAAK;;AAEjC;AACAX,gCAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAED,aALD;;AAOA;AACAP,wBAAYQ,SAAZ,GAAwBJ,KAAK;;AAE3B;AACAb,2BAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEA;AACAf,sBAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR,CAN2B,CAMgB;;AAE3C;AACAA,yBAAWC,KAAX,GAAmBY,KAAK;AACtB,sBAAM,IAAIT,KAAJ,CAAU,6CAAV,CAAN;AACD,eAFD;;AAIA;AACAG,sBAAQP,UAAR;AACD,aAfD;;AAiBA;AACAS,wBAAYU,OAAZ,GAAsBN,KAAK;;AAEzBO,sBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACA;AACAd,qBAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAED,aAND;AAOD,WA3CM,CAAP;AA4CD;;AAED;AACA,eAAOT,aAAP,CAAqBd,UAArB,EAAiC;;AAE/B;AACAD,iBAAOyB,OAAP,CAAeC,SAAS;;AAEtB,gBAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACEzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEFzB,uBAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAClCK,6BAAe;;AADmB,aAApC;AAID,WATD;AAUD;;AAED;AACA,eAAOC,eAAP,GAAyB;AACvB,cAAI/B,UAAJ,EAAgB;AACdC;AACD;AACF;AA/E4B,O","file":"ConnectionFactory.js","sourcesContent":["// variavel global que guardará os dados da nossa conexão\r\n// const ConnectionFactory = (() => {\r\n// varivael que guarda a store acima da class\r\nconst stores = [\"negociacoes\"];\r\n\r\n// variavel connection\r\nlet connection = null;\r\n\r\n// variavel que ira guardar a funcao original do close\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n  // instrução para que não seja criado instancias dessa classe no contrutor\r\n  constructor() {\r\n\r\n    throw new Error(\"Não é possível criar instância dessa classe\");\r\n\r\n  }\r\n\r\n  // método statico get connection\r\n  static getConnection() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // verificação se a connection ja existe\r\n      if (connection) return resolve(connection);\r\n\r\n      // variável da abertura da connection\r\n      // indicando o banco e a versão como parametros\r\n      const openRequest = indexedDB.open(\"jscangaceiro\", 2);\r\n\r\n      // open onupgradeneeded\r\n      openRequest.onupgradeneeded = e => {\r\n\r\n        // cria as stores\r\n        ConnectionFactory._createStores(e.target.result);\r\n\r\n      };\r\n\r\n      // open onsuccess\r\n      openRequest.onsuccess = e => {\r\n\r\n        // variável que guarda a connection\r\n        connection = e.target.result;\r\n\r\n        // atribuindo a referencia do metodo close para a variavel\r\n        close = connection.close.bind(connection); // o bind é necessáiro por que apos atribuição ainda precisaremos do connection no escopo da variavel\r\n\r\n        // alerta: caso tentem fechar a conexão\r\n        connection.close = e => {\r\n          throw new Error(\"VocÊ não pode fechar a conexão diretamente!\")\r\n        };\r\n\r\n        // passa o resultado(connection) para a promise\r\n        resolve(connection);\r\n      };\r\n\r\n      // open onerror\r\n      openRequest.onerror = e => {\r\n\r\n        console.log(e.target.error);\r\n        // passa o erro para rejewct da promise\r\n        reject(e.target.error.name);\r\n\r\n      };\r\n    });\r\n  }\r\n\r\n  // método privado so pode ser chamado na propria classe\r\n  static _createStores(connection) {\r\n\r\n    // itera no array para construir as stores\r\n    stores.forEach(store => {\r\n\r\n      if (connection.objectStoreNames.contains(store))\r\n        connection.deleteObjectStore(store);\r\n\r\n      connection.createObjectStore(store, {\r\n        autoIncrement: true\r\n\r\n      });\r\n    });\r\n  }\r\n\r\n  // método para fechar as conexões\r\n  static closeConnection() {\r\n    if (connection) {\r\n      close();\r\n    }\r\n  }\r\n}\r\n//})();"]}