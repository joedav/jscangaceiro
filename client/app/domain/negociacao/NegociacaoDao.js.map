{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","constructor","connection","_connection","_store","listaTodos","Promise","resolve","reject","negociacoes","cursor","transaction","objectStore","openCursor","onsuccess","e","atual","target","result","negociacao","value","_data","_quantidade","_valor","push","continue","onerror","console","log","error","adiciona","request","add","apagaTodos","clear"],"mappings":";;;;;;AAEEA,gB,iBAAAA,U;;;UAGWC,a,GAAN,MAAMA,aAAN,CAAoB;;AAEzB;AACAC,oBAAYC,UAAZ,EAAwB;;AAEtB,eAAKC,WAAL,GAAmBD,UAAnB;;AAEA,eAAKE,MAAL,GAAc,aAAd,CAJsB,CAIO;AAC9B;;AAED;AACAC,qBAAa;AACX,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEtC;AACA,kBAAMC,cAAc,EAApB;;AAEA;AACA,kBAAMC,SAAS,KAAKP,WAAL,CACZQ,WADY,CACA,CAAC,KAAKP,MAAN,CADA,EACe,WADf,EAEZQ,WAFY,CAEA,KAAKR,MAFL,EAGZS,UAHY,EAAf;;AAKAH,mBAAOI,SAAP,GAAmBC,KAAK;;AAEtB;AACA,oBAAMC,QAAQD,EAAEE,MAAF,CAASC,MAAvB;;AAEA;AACA,kBAAIF,KAAJ,EAAW;AACT,sBAAMG,aAAa,IAAIpB,UAAJ,CACjBiB,MAAMI,KAAN,CAAYC,KADK,EAEjBL,MAAMI,KAAN,CAAYE,WAFK,EAGjBN,MAAMI,KAAN,CAAYG,MAHK,CAAnB;;AAMA;AACAd,4BAAYe,IAAZ,CAAiBL,UAAjB;;AAEA;AACAH,sBAAMS,QAAN;AACD,eAZD,MAYO;;AAEL;AACAlB,wBAAQE,WAAR;AACD;AAEF,aAxBD;;AA0BA;AACAC,mBAAOgB,OAAP,GAAiBX,KAAK;;AAEpB;AACAY,sBAAQC,GAAR,CAAYb,EAAEE,MAAF,CAASY,KAArB;;AAEA;AACArB,qBAAO,wCAAP;AACD,aAPD;AASD,WA/CM,CAAP;AAgDD;;AAED;AACAsB,iBAASX,UAAT,EAAqB;;AAEnB,iBAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEtC;AACA,kBAAMuB,UAAU,KAAK5B,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,CAAC,KAAKR,MAAN,CAFC,EAGb4B,GAHa,CAGTb,UAHS,CAAhB;;AAKA;AACAY,oBAAQjB,SAAR,GAAoBC,KAAKR,SAAzB;;AAEA;AACAwB,oBAAQL,OAAR,GAAkBX,KAAK;;AAErB;AACAY,sBAAQC,GAAR,CAAYb,EAAEE,MAAF,CAASY,KAArB;;AAEArB,qBAAO,uCAAP;AACD,aAND;AAOD,WAnBM,CAAP;AAoBD;;AAED;AACAyB,qBAAa;AACX,iBAAO,IAAI3B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMuB,UAAU,KAAK5B,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGb8B,KAHa,EAAhB;;AAKA;AACAH,oBAAQjB,SAAR,GAAoBC,KAAKR,SAAzB;AACA;AACAwB,oBAAQL,OAAR,GAAkBX,KAAK;AACrBY,sBAAQC,GAAR,CAAYb,EAAEE,MAAF,CAASY,KAArB;AACArB,qBAAO,0CAAP;AACD,aAHD;AAKD,WAdM,CAAP;AAeD;AAxGwB,O","file":"NegociacaoDao.js","sourcesContent":["// importações\r\nimport {\r\n  Negociacao\r\n} from './Negociacao.js';\r\n\r\nexport class NegociacaoDao {\r\n\r\n  // construtor recebendo a conexão como param\r\n  constructor(connection) {\r\n\r\n    this._connection = connection;\r\n\r\n    this._store = 'negociacoes'; // as negociacoes estão no store 'negociacoes'\r\n  }\r\n\r\n  // métodos lista todos, ele busca todas as negociacoes na store\r\n  listaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // array com que armazenara as negociacoes\r\n      const negociacoes = [];\r\n\r\n      // cursor\r\n      const cursor = this._connection\r\n        .transaction([this._store], \"readwrite\")\r\n        .objectStore(this._store)\r\n        .openCursor();\r\n\r\n      cursor.onsuccess = e => {\r\n\r\n        // target atual do cursor\r\n        const atual = e.target.result;\r\n\r\n        // verifica se o cursor não é nulo\r\n        if (atual) {\r\n          const negociacao = new Negociacao(\r\n            atual.value._data,\r\n            atual.value._quantidade,\r\n            atual.value._valor\r\n          );\r\n\r\n          // adiciona a negociacao atual no array\r\n          negociacoes.push(negociacao);\r\n\r\n          // pula para o prox. target caso tenha\r\n          atual.continue();\r\n        } else {\r\n\r\n          // resolve a promise com as negociacoes\r\n          resolve(negociacoes);\r\n        }\r\n\r\n      };\r\n\r\n      // caso o cursor de erro\r\n      cursor.onerror = e => {\r\n\r\n        // mensagem no console\r\n        console.log(e.target.error);\r\n\r\n        // reject\r\n        reject(\"Não foi possível listar as negociações\");\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // método adiciona: adicionará uma nova negociacao na lista de negociacoes\r\n  adiciona(negociacao) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // variavel com a request\r\n      const request = this._connection\r\n        .transaction([this._store], 'readwrite')\r\n        .objectStore([this._store])\r\n        .add(negociacao);\r\n\r\n      // request success\r\n      request.onsuccess = e => resolve();\r\n\r\n      // request error\r\n      request.onerror = e => {\r\n\r\n        // mensagem de erro no console\r\n        console.log(e.target.error);\r\n\r\n        reject(\"Não foi possível salvar a negociação!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // método que remove todas as negociacoes \r\n  apagaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n      const request = this._connection\r\n        .transaction([this._store], \"readwrite\")\r\n        .objectStore(this._store)\r\n        .clear();\r\n\r\n      // caso a request de certo\r\n      request.onsuccess = e => resolve();\r\n      // caso a request de erro\r\n      request.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject(\"Não foi possível remover as negociações!\");\r\n      }\r\n\r\n    })\r\n  }\r\n}"]}