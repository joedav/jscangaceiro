{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoService.js"],"names":["HttpService","Negociacao","ApplicationException","NegociacaoService","constructor","_http","obtemNegociacoesDoPeriodo","periodo","Promise","all","obtemNegociacoesDaSemana","obtemNegociacoesDaSemanaAnterior","obtemNegociacoesDaSemanaRetrasada","reduce","novoArray","item","concat","sort","a","b","data","getTime","err","console","log","get","then","dados","map","objeto","Date","quantidade","valor"],"mappings":";;;;;;AAEEA,iB,sBAAAA,W;;AAGAC,gB,iBAAAA,U;;AAGAC,0B,+BAAAA,oB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAGWC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC7BC,sBAAc;AACZ;AACA,eAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACD;;AAEKM,iCAAN,GAAkC;AAAA;;AAAA;AAChC;AACA,gBAAI;AACF,kBAAIC,UAAU,MAAMC,QAAQC,GAAR,CAAY,CAC9B,MAAKC,wBAAL,EAD8B,EAE9B,MAAKC,gCAAL,EAF8B,EAG9B,MAAKC,iCAAL,EAH8B,CAAZ,CAApB;AAKA,qBAAOL,QACJM,MADI,CACG,UAACC,SAAD,EAAYC,IAAZ;AAAA,uBAAqBD,UAAUE,MAAV,CAAiBD,IAAjB,CAArB;AAAA,eADH,EACgD,EADhD,EAEJE,IAFI,CAEC,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAUA,EAAEC,IAAF,CAAOC,OAAP,KAAmBH,EAAEE,IAAF,CAAOC,OAAP,EAA7B;AAAA,eAFD,CAAP;AAGD,aATD,CASE,OAAOC,GAAP,EAAY;AACZC,sBAAQC,GAAR,CAAYF,GAAZ;AACA,oBAAM,IAAIpB,oBAAJ,CAAyB,kDAAzB,CAAN;AACD;AAd+B;AAejC;;AAGD;AACAU,4CAAoC;;AAElC,iBAAO,KAAKP,KAAL,CACJoB,GADI,CACA,uBADA,EAEJC,IAFI,CAGHC,SAASA,MAAMC,GAAN,CAAUC,UACjB,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADO,CAHN,EAKHV,OAAO;AACL,kBAAM,IAAIpB,oBAAJ,CAAyB,2DAAzB,CAAN;AACD,WAPE,CAAP;AASD;;AAGD;AACAS,2CAAmC;;AAEjC,iBAAO,KAAKN,KAAL,CACJoB,GADI,CACA,sBADA,EAEJC,IAFI,CAGHC,SAASA,MAAMC,GAAN,CAAUC,UACjB,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADO,CAHN,EAKHV,OAAO;;AAEL,kBAAM,IAAIpB,oBAAJ,CAAyB,0DAAzB,CAAN;AACD,WARE,CAAP;AAUD;;AAEDQ,mCAA2B;;AAEzB,iBAAO,KAAKL,KAAL,CACJoB,GADI,CACA,oBADA,EAEJC,IAFI,CAGHC,SACAA,MAAMC,GAAN,CAAUC,UACR,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADF,CAJG,EAMHV,OAAO;;AAEL,kBAAM,IAAIpB,oBAAJ,CAAyB,iDAAzB,CAAN;AACD,WATE,CAAP;AAWD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArE6B,O","file":"NegociacaoService.js","sourcesContent":["// importações\r\nimport {\r\n  HttpService\r\n} from '../../util/HttpService.js';\r\nimport {\r\n  Negociacao\r\n} from './Negociacao.js';\r\nimport {\r\n  ApplicationException\r\n} from '../../util/ApplicationException.js';\r\n\r\nexport class NegociacaoService {\r\n  constructor() {\r\n    // propriedade\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  async obtemNegociacoesDoPeriodo() {\r\n    // ACESSA AOS PRÓPRIOS MÉTODOS ATRAVÉS DE THIS\r\n    try {\r\n      let periodo = await Promise.all([\r\n        this.obtemNegociacoesDaSemana(),\r\n        this.obtemNegociacoesDaSemanaAnterior(),\r\n        this.obtemNegociacoesDaSemanaRetrasada()\r\n      ]);\r\n      return periodo\r\n        .reduce((novoArray, item) => novoArray.concat(item), [])\r\n        .sort((a, b) => b.data.getTime() - a.data.getTime())\r\n    } catch (err) {\r\n      console.log(err);\r\n      throw new ApplicationException('Não foi possível obter as negociações do período')\r\n    }\r\n  }\r\n\r\n\r\n  // metodo que obtem as negociacoes da semana retrasada\r\n  obtemNegociacoesDaSemanaRetrasada() {\r\n\r\n    return this._http\r\n      .get('negociacoes/retrasada')\r\n      .then(\r\n        dados => dados.map(objeto =>\r\n          new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\r\n        err => {\r\n          throw new ApplicationException('Não foi possível obter as negociações da semana retrasada');\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n  // método para obter negociacoes da semana anterior\r\n  obtemNegociacoesDaSemanaAnterior() {\r\n\r\n    return this._http\r\n      .get('negociacoes/anterior')\r\n      .then(\r\n        dados => dados.map(objeto =>\r\n          new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\r\n        err => {\r\n\r\n          throw new ApplicationException('Não foi possível obter as negociações da semana anterior');\r\n        }\r\n      );\r\n  }\r\n\r\n  obtemNegociacoesDaSemana() {\r\n\r\n    return this._http\r\n      .get('negociacoes/semana')\r\n      .then(\r\n        dados =>\r\n        dados.map(objeto =>\r\n          new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\r\n        err => {\r\n\r\n          throw new ApplicationException('Não foi possível obter as negociações da semana');\r\n        }\r\n      );\r\n  }\r\n\r\n  /* codigo com responsabilidades misturadas\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // xhr: para realizar requisições\r\n      const xhr = new XMLHttpRequest();\r\n      // abre uma conexão\r\n      xhr.open(\"GET\", \"negociacoes/semana\");\r\n\r\n      // toda requisição XHR (AJAX) passa por 5 estados\r\n      // 0: requisição ainda não iniciada;\r\n      // 1: conexão com o servidor estabelecida;\r\n      // 2: requisição recebida;\r\n      // 3: processando requisição;\r\n      // 4: requisição está concluída e a resposta está pronta.\r\n      xhr.onreadystatechange = () => {\r\n\r\n        if (xhr.readyState == 4) { // a gente precisa da ultima pois ele quem nos dará a resposta\r\n\r\n          if (xhr.status == 200) {\r\n\r\n            const negociacoes = JSON.parse(xhr.responseText)\r\n              .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor));\r\n            // this._mensagem.texto = \"Negociacoes importadas com sucesso!\";\r\n            // passando o callback \r\n            resolve(null, negociacoes);\r\n          } else {\r\n\r\n            console.log(xhr.responseText);\r\n            reject(\"Não foi possível obter negociações!\", null);\r\n          }\r\n        }\r\n      };\r\n\r\n      xhr.send(); // executa a requisição\r\n      // fim da promise\r\n    });\r\n  }*/\r\n}"]}